openapi: "3.0.0"
info:
  version: 1.0.0
  title: Auth Service
servers:
  - url: http://authservice.com:8443/aas/
paths:
  /roles:
    get:
      security:
        - bearerAuth: []
      parameters: 
        - name: service
          in: query
          description: Query matching service
          schema:
            type: string
        - name: name
          in: query
          description: Query matching role name
          schema:
            type: string
        - name: context
          in: query
          description: Query matching context
          schema:
            type: string
      summary: Query Roles
      description: Perform queries on the list of roles
      tags: 
        - Roles
      responses:
        '200':
          description: Successfully queried roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      security:
        - bearerAuth: []
      summary: Create a role
      description: Create a role. A roles consists of three parts - service, name and context(optional). Service denotes the microservice that the role belongs to
      tags:
        - Roles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleInfo'
      responses:
        '201':
          description: Successfully created a role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Credentials supplied not authorized to create specified roles
  /roles/{role_id}:
    get:
      security:
        - bearerAuth: []
      summary: Get role
      description: Get a specific role by ID
      parameters: 
        - $ref: '#/components/parameters/RoleID'
      tags:
        - Roles
      responses:
        '200':
          description: Successfully retrieved roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Credentials supplied not authorized to create specified role
        '404':
          description: Role with id not found
        
    delete:
      security:
        - bearerAuth: []
      summary: Delete Role
      description: Delete a single role by ID
      parameters: 
       - $ref: '#/components/parameters/RoleID'
      tags:
        - Roles
      responses:
        '204':
          description: Successfully deleted role
        '404':
          description: Role with id not found
          
  /users:
    get:
      security:
        - bearerAuth: []
      parameters: 
        - name: name
          in: query
          description: Query matching name
          schema:
            type: string
      summary: Query Users
      description: Perform queries on the list of users
      tags: 
        - Users
      responses:
        '200':
          description: Successfully queried users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      security:
        - bearerAuth: []
      summary: Create a user
      description: Create a user. A user can be of the following format admin, admin@WLS, admin@tds.intel.com
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Successfully created a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          description: Credentials supplied not authorized to create specified user
  /users/{user_id}:
    get:
      security:
        - bearerAuth: []
      summary: Get user
      description: Get a specific user by ID
      parameters: 
        - $ref: '#/components/parameters/UserID'
      tags:
        - Users
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Credentials supplied not authorized to create specified user
        '404':
          description: User with id not found
        
    delete:
      security:
        - bearerAuth: []
      summary: Delete User
      description: Delete a single user by ID
      parameters: 
       - $ref: '#/components/parameters/UserID'
      tags:
        - Users
      responses:
        '204':
          description: Successfully deleted user
        '404':
          description: User with id not found
  /users/{user_id}/roles:
    get:
      security:
        - bearerAuth: []
      summary: Query roles associated with user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/parameters/UserID'
        - name: service
          in: query
          description: Query matching service
          schema:
            type: string
        - name: name
          in: query
          description: Query matching role name
          schema:
            type: string
        - name: context
          in: query
          description: Query matching context
          schema:
            type: string
      description: Query roles that are associated with the user
      tags:
        - UserRoles
      responses:
        '200':
          description: Successfully queried roles that are associated with the user. If there are no roles associated with the user, an empty array would be returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: unauthorized
        '404':
          description: user_id could not be found
    post:
      security:
        - bearerAuth: []
      summary: associate roles to a user
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/parameters/UserID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleIDs'
      description: associate roles with a user
      tags:
        - UserRoles
      responses:
        '201':
          description: Successfully associated roles with uses         
  /users/{user_id}/roles/{role_id}:
    delete:
      security:
        - bearerAuth: []
      summary: removes role association from the user
      description: removes a role that is associated with the user
      tags:
        - UserRoles
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            $ref: '#/components/parameters/UserID'
        - name: role_id
          in: path
          required: true
          schema:
            $ref: '#/components/parameters/RoleID'
      responses:
        '204':
          description: Successfully removed user association
        '401':
          description: unauthorized
        '404':
          description: user_id could not be found or role_id not associated with user
  /token:
    post:
      summary: Obtain a token by supplying the user credentials
      description: Creates a token based on the user credientials that are supplied in the post body. 
      tags:
        - Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: Successfully created a token
          content:
            application/jwt:
              schema:
                type: string
        '401':
          description: Not authorized based on supplied credentials


components: 
  parameters:
    RoleID:
      name: role_id
      in: path
      description: Role ID
      required: true
      schema:
        type: string
        format: uuid
    UserID:
      name: user_id
      in: path
      description: User ID
      required: true
      schema:
        type: string
        format: uuid
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RoleInfo:
      type: object
      required:
        - service
        - name
      properties:
        service: 
          type: string
        name:
          type: string
        context: 
          type: string
  
    Role:
      type: object
      required:
        - role_id
        - service
        - name
      properties:
        role_id: 
          type: string
          format: uuid
        service: 
          type: string
        name:
          type: string
        context: 
          type: string
    RoleIDs:
      type: object
      required:
        - role_ids
      properties:
        role_ids:
          type: array
          items: 
            $ref: '#/components/parameters/RoleID'
    UserCreate:
      type: object
      required:
        - username
        - password
      properties:
        username: 
          type: string
        password:
          type: string
    User:
      type: object
      required:
        - user_id
        - username
      properties:
        user_id: 
          type: string
          format: uuid
        username: 
          type: string
    TokenRequest:
      type: object
      required:
        - username
        - password
      properties:
        username: 
          type: string
        password:
          type: string
    
